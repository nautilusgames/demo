// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nautilusgames/demo/wallet/internal/ent/session"
)

// Session is the model entity for the Session schema.
type Session struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// PlayerID holds the value of the "player_id" field.
	PlayerID string `json:"player_id,omitempty"`
	// GameID holds the value of the "game_id" field.
	GameID string `json:"game_id,omitempty"`
	// SessionID holds the value of the "session_id" field.
	SessionID int64 `json:"session_id,omitempty"`
	// WalletType holds the value of the "wallet_type" field.
	WalletType string `json:"wallet_type,omitempty"`
	// BetAmount holds the value of the "bet_amount" field.
	BetAmount int64 `json:"bet_amount,omitempty"`
	// WinAmount holds the value of the "win_amount" field.
	WinAmount int64 `json:"win_amount,omitempty"`
	// Change holds the value of the "change" field.
	Change int64 `json:"change,omitempty"`
	// NewBalance holds the value of the "new_balance" field.
	NewBalance   int64 `json:"new_balance,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Session) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case session.FieldID, session.FieldSessionID, session.FieldBetAmount, session.FieldWinAmount, session.FieldChange, session.FieldNewBalance:
			values[i] = new(sql.NullInt64)
		case session.FieldPlayerID, session.FieldGameID, session.FieldWalletType:
			values[i] = new(sql.NullString)
		case session.FieldCreatedAt, session.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Session fields.
func (s *Session) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case session.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case session.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case session.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case session.FieldPlayerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field player_id", values[i])
			} else if value.Valid {
				s.PlayerID = value.String
			}
		case session.FieldGameID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field game_id", values[i])
			} else if value.Valid {
				s.GameID = value.String
			}
		case session.FieldSessionID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field session_id", values[i])
			} else if value.Valid {
				s.SessionID = value.Int64
			}
		case session.FieldWalletType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_type", values[i])
			} else if value.Valid {
				s.WalletType = value.String
			}
		case session.FieldBetAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bet_amount", values[i])
			} else if value.Valid {
				s.BetAmount = value.Int64
			}
		case session.FieldWinAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field win_amount", values[i])
			} else if value.Valid {
				s.WinAmount = value.Int64
			}
		case session.FieldChange:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field change", values[i])
			} else if value.Valid {
				s.Change = value.Int64
			}
		case session.FieldNewBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field new_balance", values[i])
			} else if value.Valid {
				s.NewBalance = value.Int64
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Session.
// This includes values selected through modifiers, order, etc.
func (s *Session) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Session.
// Note that you need to call Session.Unwrap() before calling this method if this Session
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Session) Update() *SessionUpdateOne {
	return NewSessionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Session entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Session) Unwrap() *Session {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Session is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Session) String() string {
	var builder strings.Builder
	builder.WriteString("Session(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("player_id=")
	builder.WriteString(s.PlayerID)
	builder.WriteString(", ")
	builder.WriteString("game_id=")
	builder.WriteString(s.GameID)
	builder.WriteString(", ")
	builder.WriteString("session_id=")
	builder.WriteString(fmt.Sprintf("%v", s.SessionID))
	builder.WriteString(", ")
	builder.WriteString("wallet_type=")
	builder.WriteString(s.WalletType)
	builder.WriteString(", ")
	builder.WriteString("bet_amount=")
	builder.WriteString(fmt.Sprintf("%v", s.BetAmount))
	builder.WriteString(", ")
	builder.WriteString("win_amount=")
	builder.WriteString(fmt.Sprintf("%v", s.WinAmount))
	builder.WriteString(", ")
	builder.WriteString("change=")
	builder.WriteString(fmt.Sprintf("%v", s.Change))
	builder.WriteString(", ")
	builder.WriteString("new_balance=")
	builder.WriteString(fmt.Sprintf("%v", s.NewBalance))
	builder.WriteByte(')')
	return builder.String()
}

// Sessions is a parsable slice of Session.
type Sessions []*Session
