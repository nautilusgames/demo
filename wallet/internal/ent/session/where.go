// Code generated by ent, DO NOT EDIT.

package session

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/nautilusgames/demo/wallet/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUpdatedAt, v))
}

// PlayerID applies equality check predicate on the "player_id" field. It's identical to PlayerIDEQ.
func PlayerID(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldPlayerID, v))
}

// GameID applies equality check predicate on the "game_id" field. It's identical to GameIDEQ.
func GameID(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldGameID, v))
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSessionID, v))
}

// WalletType applies equality check predicate on the "wallet_type" field. It's identical to WalletTypeEQ.
func WalletType(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldWalletType, v))
}

// BetAmount applies equality check predicate on the "bet_amount" field. It's identical to BetAmountEQ.
func BetAmount(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldBetAmount, v))
}

// WinAmount applies equality check predicate on the "win_amount" field. It's identical to WinAmountEQ.
func WinAmount(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldWinAmount, v))
}

// Change applies equality check predicate on the "change" field. It's identical to ChangeEQ.
func Change(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldChange, v))
}

// NewBalance applies equality check predicate on the "new_balance" field. It's identical to NewBalanceEQ.
func NewBalance(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldNewBalance, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldUpdatedAt, v))
}

// PlayerIDEQ applies the EQ predicate on the "player_id" field.
func PlayerIDEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldPlayerID, v))
}

// PlayerIDNEQ applies the NEQ predicate on the "player_id" field.
func PlayerIDNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldPlayerID, v))
}

// PlayerIDIn applies the In predicate on the "player_id" field.
func PlayerIDIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldPlayerID, vs...))
}

// PlayerIDNotIn applies the NotIn predicate on the "player_id" field.
func PlayerIDNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldPlayerID, vs...))
}

// PlayerIDGT applies the GT predicate on the "player_id" field.
func PlayerIDGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldPlayerID, v))
}

// PlayerIDGTE applies the GTE predicate on the "player_id" field.
func PlayerIDGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldPlayerID, v))
}

// PlayerIDLT applies the LT predicate on the "player_id" field.
func PlayerIDLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldPlayerID, v))
}

// PlayerIDLTE applies the LTE predicate on the "player_id" field.
func PlayerIDLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldPlayerID, v))
}

// PlayerIDContains applies the Contains predicate on the "player_id" field.
func PlayerIDContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldPlayerID, v))
}

// PlayerIDHasPrefix applies the HasPrefix predicate on the "player_id" field.
func PlayerIDHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldPlayerID, v))
}

// PlayerIDHasSuffix applies the HasSuffix predicate on the "player_id" field.
func PlayerIDHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldPlayerID, v))
}

// PlayerIDEqualFold applies the EqualFold predicate on the "player_id" field.
func PlayerIDEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldPlayerID, v))
}

// PlayerIDContainsFold applies the ContainsFold predicate on the "player_id" field.
func PlayerIDContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldPlayerID, v))
}

// GameIDEQ applies the EQ predicate on the "game_id" field.
func GameIDEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldGameID, v))
}

// GameIDNEQ applies the NEQ predicate on the "game_id" field.
func GameIDNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldGameID, v))
}

// GameIDIn applies the In predicate on the "game_id" field.
func GameIDIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldGameID, vs...))
}

// GameIDNotIn applies the NotIn predicate on the "game_id" field.
func GameIDNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldGameID, vs...))
}

// GameIDGT applies the GT predicate on the "game_id" field.
func GameIDGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldGameID, v))
}

// GameIDGTE applies the GTE predicate on the "game_id" field.
func GameIDGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldGameID, v))
}

// GameIDLT applies the LT predicate on the "game_id" field.
func GameIDLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldGameID, v))
}

// GameIDLTE applies the LTE predicate on the "game_id" field.
func GameIDLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldGameID, v))
}

// GameIDContains applies the Contains predicate on the "game_id" field.
func GameIDContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldGameID, v))
}

// GameIDHasPrefix applies the HasPrefix predicate on the "game_id" field.
func GameIDHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldGameID, v))
}

// GameIDHasSuffix applies the HasSuffix predicate on the "game_id" field.
func GameIDHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldGameID, v))
}

// GameIDEqualFold applies the EqualFold predicate on the "game_id" field.
func GameIDEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldGameID, v))
}

// GameIDContainsFold applies the ContainsFold predicate on the "game_id" field.
func GameIDContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldGameID, v))
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldSessionID, v))
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldSessionID, v))
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldSessionID, vs...))
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldSessionID, vs...))
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v int64) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldSessionID, v))
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldSessionID, v))
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v int64) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldSessionID, v))
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldSessionID, v))
}

// WalletTypeEQ applies the EQ predicate on the "wallet_type" field.
func WalletTypeEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldWalletType, v))
}

// WalletTypeNEQ applies the NEQ predicate on the "wallet_type" field.
func WalletTypeNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldWalletType, v))
}

// WalletTypeIn applies the In predicate on the "wallet_type" field.
func WalletTypeIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldWalletType, vs...))
}

// WalletTypeNotIn applies the NotIn predicate on the "wallet_type" field.
func WalletTypeNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldWalletType, vs...))
}

// WalletTypeGT applies the GT predicate on the "wallet_type" field.
func WalletTypeGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldWalletType, v))
}

// WalletTypeGTE applies the GTE predicate on the "wallet_type" field.
func WalletTypeGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldWalletType, v))
}

// WalletTypeLT applies the LT predicate on the "wallet_type" field.
func WalletTypeLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldWalletType, v))
}

// WalletTypeLTE applies the LTE predicate on the "wallet_type" field.
func WalletTypeLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldWalletType, v))
}

// WalletTypeContains applies the Contains predicate on the "wallet_type" field.
func WalletTypeContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldWalletType, v))
}

// WalletTypeHasPrefix applies the HasPrefix predicate on the "wallet_type" field.
func WalletTypeHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldWalletType, v))
}

// WalletTypeHasSuffix applies the HasSuffix predicate on the "wallet_type" field.
func WalletTypeHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldWalletType, v))
}

// WalletTypeIsNil applies the IsNil predicate on the "wallet_type" field.
func WalletTypeIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldWalletType))
}

// WalletTypeNotNil applies the NotNil predicate on the "wallet_type" field.
func WalletTypeNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldWalletType))
}

// WalletTypeEqualFold applies the EqualFold predicate on the "wallet_type" field.
func WalletTypeEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldWalletType, v))
}

// WalletTypeContainsFold applies the ContainsFold predicate on the "wallet_type" field.
func WalletTypeContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldWalletType, v))
}

// BetAmountEQ applies the EQ predicate on the "bet_amount" field.
func BetAmountEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldBetAmount, v))
}

// BetAmountNEQ applies the NEQ predicate on the "bet_amount" field.
func BetAmountNEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldBetAmount, v))
}

// BetAmountIn applies the In predicate on the "bet_amount" field.
func BetAmountIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldBetAmount, vs...))
}

// BetAmountNotIn applies the NotIn predicate on the "bet_amount" field.
func BetAmountNotIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldBetAmount, vs...))
}

// BetAmountGT applies the GT predicate on the "bet_amount" field.
func BetAmountGT(v int64) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldBetAmount, v))
}

// BetAmountGTE applies the GTE predicate on the "bet_amount" field.
func BetAmountGTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldBetAmount, v))
}

// BetAmountLT applies the LT predicate on the "bet_amount" field.
func BetAmountLT(v int64) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldBetAmount, v))
}

// BetAmountLTE applies the LTE predicate on the "bet_amount" field.
func BetAmountLTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldBetAmount, v))
}

// WinAmountEQ applies the EQ predicate on the "win_amount" field.
func WinAmountEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldWinAmount, v))
}

// WinAmountNEQ applies the NEQ predicate on the "win_amount" field.
func WinAmountNEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldWinAmount, v))
}

// WinAmountIn applies the In predicate on the "win_amount" field.
func WinAmountIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldWinAmount, vs...))
}

// WinAmountNotIn applies the NotIn predicate on the "win_amount" field.
func WinAmountNotIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldWinAmount, vs...))
}

// WinAmountGT applies the GT predicate on the "win_amount" field.
func WinAmountGT(v int64) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldWinAmount, v))
}

// WinAmountGTE applies the GTE predicate on the "win_amount" field.
func WinAmountGTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldWinAmount, v))
}

// WinAmountLT applies the LT predicate on the "win_amount" field.
func WinAmountLT(v int64) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldWinAmount, v))
}

// WinAmountLTE applies the LTE predicate on the "win_amount" field.
func WinAmountLTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldWinAmount, v))
}

// ChangeEQ applies the EQ predicate on the "change" field.
func ChangeEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldChange, v))
}

// ChangeNEQ applies the NEQ predicate on the "change" field.
func ChangeNEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldChange, v))
}

// ChangeIn applies the In predicate on the "change" field.
func ChangeIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldChange, vs...))
}

// ChangeNotIn applies the NotIn predicate on the "change" field.
func ChangeNotIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldChange, vs...))
}

// ChangeGT applies the GT predicate on the "change" field.
func ChangeGT(v int64) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldChange, v))
}

// ChangeGTE applies the GTE predicate on the "change" field.
func ChangeGTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldChange, v))
}

// ChangeLT applies the LT predicate on the "change" field.
func ChangeLT(v int64) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldChange, v))
}

// ChangeLTE applies the LTE predicate on the "change" field.
func ChangeLTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldChange, v))
}

// NewBalanceEQ applies the EQ predicate on the "new_balance" field.
func NewBalanceEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldNewBalance, v))
}

// NewBalanceNEQ applies the NEQ predicate on the "new_balance" field.
func NewBalanceNEQ(v int64) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldNewBalance, v))
}

// NewBalanceIn applies the In predicate on the "new_balance" field.
func NewBalanceIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldNewBalance, vs...))
}

// NewBalanceNotIn applies the NotIn predicate on the "new_balance" field.
func NewBalanceNotIn(vs ...int64) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldNewBalance, vs...))
}

// NewBalanceGT applies the GT predicate on the "new_balance" field.
func NewBalanceGT(v int64) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldNewBalance, v))
}

// NewBalanceGTE applies the GTE predicate on the "new_balance" field.
func NewBalanceGTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldNewBalance, v))
}

// NewBalanceLT applies the LT predicate on the "new_balance" field.
func NewBalanceLT(v int64) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldNewBalance, v))
}

// NewBalanceLTE applies the LTE predicate on the "new_balance" field.
func NewBalanceLTE(v int64) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldNewBalance, v))
}

// NewBalanceIsNil applies the IsNil predicate on the "new_balance" field.
func NewBalanceIsNil() predicate.Session {
	return predicate.Session(sql.FieldIsNull(FieldNewBalance))
}

// NewBalanceNotNil applies the NotNil predicate on the "new_balance" field.
func NewBalanceNotNil() predicate.Session {
	return predicate.Session(sql.FieldNotNull(FieldNewBalance))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Session) predicate.Session {
	return predicate.Session(sql.NotPredicates(p))
}
