// Code generated by ent, DO NOT EDIT.

package session

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/nautilusgames/demo/wallet/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUpdatedAt, v))
}

// GameID applies equality check predicate on the "game_id" field. It's identical to GameIDEQ.
func GameID(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldGameID, v))
}

// GameSessionID applies equality check predicate on the "game_session_id" field. It's identical to GameSessionIDEQ.
func GameSessionID(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldGameSessionID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldUpdatedAt, v))
}

// GameIDEQ applies the EQ predicate on the "game_id" field.
func GameIDEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldGameID, v))
}

// GameIDNEQ applies the NEQ predicate on the "game_id" field.
func GameIDNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldGameID, v))
}

// GameIDIn applies the In predicate on the "game_id" field.
func GameIDIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldGameID, vs...))
}

// GameIDNotIn applies the NotIn predicate on the "game_id" field.
func GameIDNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldGameID, vs...))
}

// GameIDGT applies the GT predicate on the "game_id" field.
func GameIDGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldGameID, v))
}

// GameIDGTE applies the GTE predicate on the "game_id" field.
func GameIDGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldGameID, v))
}

// GameIDLT applies the LT predicate on the "game_id" field.
func GameIDLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldGameID, v))
}

// GameIDLTE applies the LTE predicate on the "game_id" field.
func GameIDLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldGameID, v))
}

// GameIDContains applies the Contains predicate on the "game_id" field.
func GameIDContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldGameID, v))
}

// GameIDHasPrefix applies the HasPrefix predicate on the "game_id" field.
func GameIDHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldGameID, v))
}

// GameIDHasSuffix applies the HasSuffix predicate on the "game_id" field.
func GameIDHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldGameID, v))
}

// GameIDEqualFold applies the EqualFold predicate on the "game_id" field.
func GameIDEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldGameID, v))
}

// GameIDContainsFold applies the ContainsFold predicate on the "game_id" field.
func GameIDContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldGameID, v))
}

// GameSessionIDEQ applies the EQ predicate on the "game_session_id" field.
func GameSessionIDEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldGameSessionID, v))
}

// GameSessionIDNEQ applies the NEQ predicate on the "game_session_id" field.
func GameSessionIDNEQ(v string) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldGameSessionID, v))
}

// GameSessionIDIn applies the In predicate on the "game_session_id" field.
func GameSessionIDIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldGameSessionID, vs...))
}

// GameSessionIDNotIn applies the NotIn predicate on the "game_session_id" field.
func GameSessionIDNotIn(vs ...string) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldGameSessionID, vs...))
}

// GameSessionIDGT applies the GT predicate on the "game_session_id" field.
func GameSessionIDGT(v string) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldGameSessionID, v))
}

// GameSessionIDGTE applies the GTE predicate on the "game_session_id" field.
func GameSessionIDGTE(v string) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldGameSessionID, v))
}

// GameSessionIDLT applies the LT predicate on the "game_session_id" field.
func GameSessionIDLT(v string) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldGameSessionID, v))
}

// GameSessionIDLTE applies the LTE predicate on the "game_session_id" field.
func GameSessionIDLTE(v string) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldGameSessionID, v))
}

// GameSessionIDContains applies the Contains predicate on the "game_session_id" field.
func GameSessionIDContains(v string) predicate.Session {
	return predicate.Session(sql.FieldContains(FieldGameSessionID, v))
}

// GameSessionIDHasPrefix applies the HasPrefix predicate on the "game_session_id" field.
func GameSessionIDHasPrefix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasPrefix(FieldGameSessionID, v))
}

// GameSessionIDHasSuffix applies the HasSuffix predicate on the "game_session_id" field.
func GameSessionIDHasSuffix(v string) predicate.Session {
	return predicate.Session(sql.FieldHasSuffix(FieldGameSessionID, v))
}

// GameSessionIDEqualFold applies the EqualFold predicate on the "game_session_id" field.
func GameSessionIDEqualFold(v string) predicate.Session {
	return predicate.Session(sql.FieldEqualFold(FieldGameSessionID, v))
}

// GameSessionIDContainsFold applies the ContainsFold predicate on the "game_session_id" field.
func GameSessionIDContainsFold(v string) predicate.Session {
	return predicate.Session(sql.FieldContainsFold(FieldGameSessionID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Session) predicate.Session {
	return predicate.Session(sql.NotPredicates(p))
}
