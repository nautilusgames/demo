// Code generated by ent, DO NOT EDIT.

package session

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the session type in the database.
	Label = "session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPlayerID holds the string denoting the player_id field in the database.
	FieldPlayerID = "player_id"
	// FieldGameID holds the string denoting the game_id field in the database.
	FieldGameID = "game_id"
	// FieldSessionID holds the string denoting the session_id field in the database.
	FieldSessionID = "session_id"
	// FieldWalletType holds the string denoting the wallet_type field in the database.
	FieldWalletType = "wallet_type"
	// FieldBetAmount holds the string denoting the bet_amount field in the database.
	FieldBetAmount = "bet_amount"
	// FieldWinAmount holds the string denoting the win_amount field in the database.
	FieldWinAmount = "win_amount"
	// FieldChange holds the string denoting the change field in the database.
	FieldChange = "change"
	// FieldNewBalance holds the string denoting the new_balance field in the database.
	FieldNewBalance = "new_balance"
	// Table holds the table name of the session in the database.
	Table = "sessions"
)

// Columns holds all SQL columns for session fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPlayerID,
	FieldGameID,
	FieldSessionID,
	FieldWalletType,
	FieldBetAmount,
	FieldWinAmount,
	FieldChange,
	FieldNewBalance,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Session queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPlayerID orders the results by the player_id field.
func ByPlayerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlayerID, opts...).ToFunc()
}

// ByGameID orders the results by the game_id field.
func ByGameID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGameID, opts...).ToFunc()
}

// BySessionID orders the results by the session_id field.
func BySessionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSessionID, opts...).ToFunc()
}

// ByWalletType orders the results by the wallet_type field.
func ByWalletType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWalletType, opts...).ToFunc()
}

// ByBetAmount orders the results by the bet_amount field.
func ByBetAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBetAmount, opts...).ToFunc()
}

// ByWinAmount orders the results by the win_amount field.
func ByWinAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWinAmount, opts...).ToFunc()
}

// ByChange orders the results by the change field.
func ByChange(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChange, opts...).ToFunc()
}

// ByNewBalance orders the results by the new_balance field.
func ByNewBalance(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNewBalance, opts...).ToFunc()
}
