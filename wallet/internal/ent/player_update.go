// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nautilusgames/demo/wallet/internal/ent/player"
	"github.com/nautilusgames/demo/wallet/internal/ent/predicate"
)

// PlayerUpdate is the builder for updating Player entities.
type PlayerUpdate struct {
	config
	hooks     []Hook
	mutation  *PlayerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PlayerUpdate builder.
func (pu *PlayerUpdate) Where(ps ...predicate.Player) *PlayerUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PlayerUpdate) SetUpdatedAt(t time.Time) *PlayerUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetCurrency sets the "currency" field.
func (pu *PlayerUpdate) SetCurrency(s string) *PlayerUpdate {
	pu.mutation.SetCurrency(s)
	return pu
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableCurrency(s *string) *PlayerUpdate {
	if s != nil {
		pu.SetCurrency(*s)
	}
	return pu
}

// SetBalance sets the "balance" field.
func (pu *PlayerUpdate) SetBalance(i int64) *PlayerUpdate {
	pu.mutation.ResetBalance()
	pu.mutation.SetBalance(i)
	return pu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (pu *PlayerUpdate) SetNillableBalance(i *int64) *PlayerUpdate {
	if i != nil {
		pu.SetBalance(*i)
	}
	return pu
}

// AddBalance adds i to the "balance" field.
func (pu *PlayerUpdate) AddBalance(i int64) *PlayerUpdate {
	pu.mutation.AddBalance(i)
	return pu
}

// Mutation returns the PlayerMutation object of the builder.
func (pu *PlayerUpdate) Mutation() *PlayerMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlayerUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlayerUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlayerUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlayerUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PlayerUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := player.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlayerUpdate) check() error {
	if v, ok := pu.mutation.Balance(); ok {
		if err := player.BalanceValidator(v); err != nil {
			return &ValidationError{Name: "balance", err: fmt.Errorf(`ent: validator failed for field "Player.balance": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PlayerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlayerUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PlayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(player.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Currency(); ok {
		_spec.SetField(player.FieldCurrency, field.TypeString, value)
	}
	if value, ok := pu.mutation.Balance(); ok {
		_spec.SetField(player.FieldBalance, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedBalance(); ok {
		_spec.AddField(player.FieldBalance, field.TypeInt64, value)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlayerUpdateOne is the builder for updating a single Player entity.
type PlayerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PlayerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PlayerUpdateOne) SetUpdatedAt(t time.Time) *PlayerUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetCurrency sets the "currency" field.
func (puo *PlayerUpdateOne) SetCurrency(s string) *PlayerUpdateOne {
	puo.mutation.SetCurrency(s)
	return puo
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableCurrency(s *string) *PlayerUpdateOne {
	if s != nil {
		puo.SetCurrency(*s)
	}
	return puo
}

// SetBalance sets the "balance" field.
func (puo *PlayerUpdateOne) SetBalance(i int64) *PlayerUpdateOne {
	puo.mutation.ResetBalance()
	puo.mutation.SetBalance(i)
	return puo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableBalance(i *int64) *PlayerUpdateOne {
	if i != nil {
		puo.SetBalance(*i)
	}
	return puo
}

// AddBalance adds i to the "balance" field.
func (puo *PlayerUpdateOne) AddBalance(i int64) *PlayerUpdateOne {
	puo.mutation.AddBalance(i)
	return puo
}

// Mutation returns the PlayerMutation object of the builder.
func (puo *PlayerUpdateOne) Mutation() *PlayerMutation {
	return puo.mutation
}

// Where appends a list predicates to the PlayerUpdate builder.
func (puo *PlayerUpdateOne) Where(ps ...predicate.Player) *PlayerUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlayerUpdateOne) Select(field string, fields ...string) *PlayerUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Player entity.
func (puo *PlayerUpdateOne) Save(ctx context.Context) (*Player, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlayerUpdateOne) SaveX(ctx context.Context) *Player {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlayerUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlayerUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PlayerUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := player.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlayerUpdateOne) check() error {
	if v, ok := puo.mutation.Balance(); ok {
		if err := player.BalanceValidator(v); err != nil {
			return &ValidationError{Name: "balance", err: fmt.Errorf(`ent: validator failed for field "Player.balance": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PlayerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PlayerUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PlayerUpdateOne) sqlSave(ctx context.Context) (_node *Player, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Player.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, player.FieldID)
		for _, f := range fields {
			if !player.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != player.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(player.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Currency(); ok {
		_spec.SetField(player.FieldCurrency, field.TypeString, value)
	}
	if value, ok := puo.mutation.Balance(); ok {
		_spec.SetField(player.FieldBalance, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedBalance(); ok {
		_spec.AddField(player.FieldBalance, field.TypeInt64, value)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Player{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
