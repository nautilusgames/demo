// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/nautilusgames/demo/wallet/internal/ent/player"
	"github.com/nautilusgames/demo/wallet/internal/ent/session"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   player.Table,
			Columns: player.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: player.FieldID,
			},
		},
		Type: "Player",
		Fields: map[string]*sqlgraph.FieldSpec{
			player.FieldCreatedAt: {Type: field.TypeTime, Column: player.FieldCreatedAt},
			player.FieldUpdatedAt: {Type: field.TypeTime, Column: player.FieldUpdatedAt},
			player.FieldCurrency:  {Type: field.TypeString, Column: player.FieldCurrency},
			player.FieldBalance:   {Type: field.TypeInt64, Column: player.FieldBalance},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   session.Table,
			Columns: session.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: session.FieldID,
			},
		},
		Type: "Session",
		Fields: map[string]*sqlgraph.FieldSpec{
			session.FieldCreatedAt:  {Type: field.TypeTime, Column: session.FieldCreatedAt},
			session.FieldUpdatedAt:  {Type: field.TypeTime, Column: session.FieldUpdatedAt},
			session.FieldPlayerID:   {Type: field.TypeString, Column: session.FieldPlayerID},
			session.FieldGameID:     {Type: field.TypeString, Column: session.FieldGameID},
			session.FieldSessionID:  {Type: field.TypeInt64, Column: session.FieldSessionID},
			session.FieldWalletType: {Type: field.TypeString, Column: session.FieldWalletType},
			session.FieldBetAmount:  {Type: field.TypeInt64, Column: session.FieldBetAmount},
			session.FieldWinAmount:  {Type: field.TypeInt64, Column: session.FieldWinAmount},
			session.FieldChange:     {Type: field.TypeInt64, Column: session.FieldChange},
			session.FieldNewBalance: {Type: field.TypeInt64, Column: session.FieldNewBalance},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (pq *PlayerQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PlayerQuery builder.
func (pq *PlayerQuery) Filter() *PlayerFilter {
	return &PlayerFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PlayerMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PlayerMutation builder.
func (m *PlayerMutation) Filter() *PlayerFilter {
	return &PlayerFilter{config: m.config, predicateAdder: m}
}

// PlayerFilter provides a generic filtering capability at runtime for PlayerQuery.
type PlayerFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PlayerFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *PlayerFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(player.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PlayerFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(player.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PlayerFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(player.FieldUpdatedAt))
}

// WhereCurrency applies the entql string predicate on the currency field.
func (f *PlayerFilter) WhereCurrency(p entql.StringP) {
	f.Where(p.Field(player.FieldCurrency))
}

// WhereBalance applies the entql int64 predicate on the balance field.
func (f *PlayerFilter) WhereBalance(p entql.Int64P) {
	f.Where(p.Field(player.FieldBalance))
}

// addPredicate implements the predicateAdder interface.
func (sq *SessionQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SessionQuery builder.
func (sq *SessionQuery) Filter() *SessionFilter {
	return &SessionFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SessionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SessionMutation builder.
func (m *SessionMutation) Filter() *SessionFilter {
	return &SessionFilter{config: m.config, predicateAdder: m}
}

// SessionFilter provides a generic filtering capability at runtime for SessionQuery.
type SessionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SessionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *SessionFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(session.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *SessionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *SessionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(session.FieldUpdatedAt))
}

// WherePlayerID applies the entql string predicate on the player_id field.
func (f *SessionFilter) WherePlayerID(p entql.StringP) {
	f.Where(p.Field(session.FieldPlayerID))
}

// WhereGameID applies the entql string predicate on the game_id field.
func (f *SessionFilter) WhereGameID(p entql.StringP) {
	f.Where(p.Field(session.FieldGameID))
}

// WhereSessionID applies the entql int64 predicate on the session_id field.
func (f *SessionFilter) WhereSessionID(p entql.Int64P) {
	f.Where(p.Field(session.FieldSessionID))
}

// WhereWalletType applies the entql string predicate on the wallet_type field.
func (f *SessionFilter) WhereWalletType(p entql.StringP) {
	f.Where(p.Field(session.FieldWalletType))
}

// WhereBetAmount applies the entql int64 predicate on the bet_amount field.
func (f *SessionFilter) WhereBetAmount(p entql.Int64P) {
	f.Where(p.Field(session.FieldBetAmount))
}

// WhereWinAmount applies the entql int64 predicate on the win_amount field.
func (f *SessionFilter) WhereWinAmount(p entql.Int64P) {
	f.Where(p.Field(session.FieldWinAmount))
}

// WhereChange applies the entql int64 predicate on the change field.
func (f *SessionFilter) WhereChange(p entql.Int64P) {
	f.Where(p.Field(session.FieldChange))
}

// WhereNewBalance applies the entql int64 predicate on the new_balance field.
func (f *SessionFilter) WhereNewBalance(p entql.Int64P) {
	f.Where(p.Field(session.FieldNewBalance))
}
